import dummy.purity.qual.*;
// This file was generated by running the following commands:
//   cd ~/java/jdk/src
//   search -i -n '\bintern(|alized?|ed|ing)\b'
//   search -n -n 'public static final String[^;]*"'
// and examining the search results.

package java.io;



package java.lang;

public class StringBuffer {
  @Impure public synchronized StringBuffer append(Object[] a1);
  @Impure public synchronized StringBuffer append(String str);
  @Impure public synchronized StringBuffer append(StringBuffer sb);
  @Impure public synchronized StringBuffer append(AbstractStringBuilder asb);
  @Impure public synchronized StringBuffer append(CharSequence s);
  @Impure public synchronized StringBuffer append(CharSequence s, int start, int end);
  @Impure public synchronized StringBuffer append(char[] str);
  @Impure public synchronized StringBuffer append(char[] str, int offset, int len);
  @Impure public synchronized StringBuffer append(boolean b);
  @Impure public synchronized StringBuffer append(char c);
  @Impure public synchronized StringBuffer append(int i);
  @Impure public synchronized StringBuffer append(long i);
  @Impure public synchronized StringBuffer append(float i);
  @Impure public synchronized StringBuffer append(double i);
  @Impure public synchronized StringBuffer delete(int start, int end);
}


package java.util;

public class Arrays{
  @Impure public static void sort(Object[] a1);
  @Impure public static void sort(Object[] a1, int a2, int a3);
  @Impure public static void fill(Object[] a1,  Object a2);
  @Impure public static void fill(Object[] a1, int a2, int a3,  Object a4);
}


public interface List<E> {

}

public class ArrayList {
  @Impure public boolean add(Object e);
  @Impure public boolean add(int index, Object e);
  @Impure public Object remove(int index);
  @Impure public boolean remove(Object index);
  @Impure public void clear();
}

public interface Collection<E> extends Iterable<E> {
    @Pure boolean contains(@Nullable Object o);
    @Impure boolean remove(@Nullable Object o);
    @Pure boolean containsAll(Collection<?> c);
    @Impure boolean removeAll(Collection<?> c);
    @Impure boolean retainAll(Collection<?> c);
}


public interface List<E> extends Collection<E> {
  @Impure public void add(E a1);
  @Impure public void remove(int position);
  @Impure boolean remove(@Nullable E o);
  @Impure public void removeAll();
  @Impure boolean removeAll(Collection<?> c);
  @Impure boolean retainAll(Collection<?> c);
  @Impure void putAll(Map<? extends K, ? extends V> m);
  @Impure void clear();
}


public interface Map<K, V> {
    @Impure ObjectV put(Object key, Object value);
    @Impure @Nullable V remove(@Nullable Object key);
    @Impure default boolean remove(@Nullable Object key, @Nullable Object value);
    }

public interface Set<E> extends Collection<E> {
    @Impure boolean remove(@Nullable Object o);
    @Impure boolean retainAll(Collection<?> c);
    @Impure boolean removeAll(Collection<?> c);
}


package java.util.logging;

// public @UsesObjectEquals class Logger {}
